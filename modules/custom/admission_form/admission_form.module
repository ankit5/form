<?php
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\file\FileInterface;



/**
 * Implements hook_form_FORM_ID_alter().
 */
function admission_form_form_node_admission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
   // exit;
    $current_path = \Drupal::service('path.current')->getPath();
  if($current_path == '/node/add/admission'){ $form['#title'] = t('APPLICATION ADMISSION FORM');}
   if($current_path == '/admission-form-bfa') $form['#title'] = t('APPLICATION FORM BFA');
  $form['#theme'] = ['node_admission_forms'];
   $form['#validate'][] = '_form_validation_admission';
  $form['actions']['submit']['#submit'][] = '_form_submit_admission';
  $form['title']['widget'][0]['value']['#description'] = t('(in block letters as in Senior School Certificate)');
  $form['actions']['submit']['#value'] = t('Save');
  $form['#attached']['library'][] = 'admission_form/global-styling';
   $form['#attached']['library'][] = 'admission_form/user_module_external';
   $form['field_category_certificate']['widget'][0]['#upload_validators']['_validate_file'] = [];
   $form['field_annual_income_certificate']['widget'][0]['#upload_validators']['_validate_file'] = [];
   $form['field_date_of_birth_certificate']['widget'][0]['#upload_validators']['_validate_file'] = [];
   
}

function _validate_file(FileInterface $file) {
  $errors = [];
  $size = $file->getSize();
  if($size < 1000000){
 $errors[] = t($size."Minimum file size 1 MB is required.");
}
 
  return $errors;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function admission_form_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if (isset($element['#field_name']) && ($element['#field_name'] == 'field_category_certificate' || $element['#field_name'] == 'field_annual_income_certificate' || $element['#field_name'] == 'field_date_of_birth_certificate'))

   {
      // Add process callback to change field description.
      $element['#process'][] = '_change_description';
    }
  }


/**
 *  The description field is build in a #process callback so we need to add another callback.
 */
function _change_description($element, FormStateInterface $form_state, $form) {
  $element['#description'] = t('File size 1 MB to 5 MB limit.<br>
Allowed types: pdf.');
  return $element;
}

function _form_validation_admission(&$form, FormStateInterface $form_state)
{
  # code...
}

function _form_submit_admission(&$form, FormStateInterface $form_state)
{
  \Drupal::service('messenger')->addMessage("Application Submit Succesfully");
$url = Url::fromUserInput('/thank-you', [], ['absolute' => 'true']);
     $response = new RedirectResponse($url->toString());
      $response->send();
}

/**
 * Implements hook_theme().
 */
function admission_form_theme($existing, $type, $theme, $path) {
  return array(
    'node_admission_forms' => [
      'render element' => 'form',
    ],
    'thank_you' => [  
      'variables' => ['test_var' =>NULL],
    ],
  );
}



/**
 * Implements hook_preprocess().
 */
function admission_form_preprocess(&$variables, $hook) {
 
 $current_path = \Drupal::service('path.current')->getPath();
  if($current_path == '/node/add/admission' || $current_path == '/admission-form-bfa'){
  if($hook == 'input' || $hook == 'select' || $hook == 'textarea') {
     if($variables['element']['#type'] == 'submit'){
     $variables['attributes']['class'][] = Html::cleanCssIdentifier('btn-primary');
     }
    if($variables['element']['#type'] != 'checkbox' and $variables['element']['#type'] != 'radio'){
     $variables['attributes']['class'][] = Html::cleanCssIdentifier('form-control');
     }
    
}
}

}